<?xml version="1.0"?>
<!--
  - $Rev: 1074 $ $Date: 2005-05-19 18:06:59 -0500 (Thu, 19 May 2005) $
  -
  - Copyright (c) 2002-2005 Scott Lamb <slamb@slamb.org>.
  - This file is part of Axamol SQL Library, which is released under the MIT
  - license.
  -->

<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:l="http://www.slamb.org/axamol/sql-library/library"
  xmlns:s="http://www.slamb.org/axamol/sql-library/statement"
  xmlns:xalan="http://xml.apache.org/xslt">

  <xsl:output method="html"
              indent="yes"
              xalan:indent-amount="2"
              doctype-public="-//W3C//DTD 4.01//EN"
              doctype-system="http://www.w3.org/TR/html4/strict.dtd"/>

  <xsl:preserve-space elements="sql"/>

  <xsl:template match="/">
    <html>
      <head>
        <title>Library <xsl:call-template name="library-name"/></title>
        <xsl:call-template name="library-style"/>
      </head>
      <body>
        <h1>Library <xsl:call-template name="library-name"/></h1>

        <xsl:apply-templates/>

        <hr noshade="noshade"/>

        <p>Generated by <a
        href="http://www.slamb.org/projects/axamol/sql-library/">Axamol SQL
        Library</a>.</p>
      </body>
    </html>
  </xsl:template>

  <xsl:template name="library-style">
    <style language="text/css">
      body { margin-left: 0.5in; margin-right: 0.5in; }
      h1, h2 { font-family: sans-serif; color: darkblue; }
      h1 a, h2 a { color: darkblue; }
      h1 { font-size: 150%; }
      h2 { font-size: 110%; }
      h3 { font-size: 100%; margin-left: 0.25in; font-family: sans-serif; }
      ul, pre, p { margin-left: 0.5in; }
      pre { border: 1px solid black; background-color: #eee; margin-left: 0.75in; margin-right: 0.25in; }
      //.conditional { border: 1px dotted black; background-color: #ddf; }
    </style>
  </xsl:template>

  <xsl:template name="library-name">
    <xsl:choose>
      <xsl:when test="l:library/l:name">
        <xsl:value-of select="l:library/l:name"/>
      </xsl:when>
      <xsl:otherwise>
        (unnamed)
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="l:library">
    <xsl:if test="l:version">
      <h3>Version</h3>
      <p><xsl:value-of select="l:version"/></p>
    </xsl:if>

    <xsl:if test="l:description">
      <h3>Description</h3>
      <p><xsl:value-of select="l:description"/></p>
    </xsl:if>

    <h3>Contents</h3>
    <ul>
      <xsl:apply-templates select="(s:query|s:update)" mode="contents"/>
    </ul>

    <xsl:apply-templates select="(s:query|s:update)"/>
  </xsl:template>

  <xsl:template match="s:query|s:update" mode="contents">
    <li>
      <xsl:value-of select="local-name(.)"/> <xsl:text> </xsl:text>
      <a id="st_{@name}_contents" href="#st_{@name}_full">
        <xsl:value-of select="@name"/>
      </a>
    </li>
  </xsl:template>

  <xsl:template match="s:query|s:update">
    <hr noshade="noshade"/>
    <h2>
      <xsl:value-of select="local-name(.)"/> <xsl:text> </xsl:text>
      <a href="#st_{@name}_contents" id="st_{@name}_full">
        <xsl:value-of select="@name"/>
      </a>
    </h2>
    <xsl:if test="l:description">
      <h3>Description</h3>
      <p><xsl:copy-of select="l:description"/></p>
    </xsl:if>
    <xsl:if test="s:param">
      <h3>Parameters</h3>
      <ul>
        <xsl:for-each select="s:param">
          <li>
            <xsl:if test="@type">
              <xsl:value-of select="@type"/>
              <xsl:text> </xsl:text>
            </xsl:if>
            <b><xsl:value-of select="@name"/></b>
            <xsl:if test="@list='true'">
              (list variable) <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:if test="l:description">
              &#x2014; <xsl:value-of select="l:description"/>
            </xsl:if>
          </li>
        </xsl:for-each>
      </ul>
    </xsl:if>
    <xsl:for-each select="s:sql">
      <h3>SQL syntax: <xsl:value-of select="@databases"/></h3>
      <pre><xsl:apply-templates/></pre>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="s:bind"> <b>&lt;<i><xsl:value-of select="@param"/></i>&gt;</b> </xsl:template>
  <xsl:template match="s:ifNotNull"> <span class="conditional"><b>[if <i>&lt;<xsl:value-of select="@param"/>></i> is not null]</b><xsl:apply-templates/><b>[/if]</b></span></xsl:template>
  <xsl:template match="s:bindlist"> <b>&lt;<xsl:value-of select="@param"/>&gt;</b> (list)</xsl:template>
  <xsl:template match="s:bindlist[@join or @each]"> <b>&lt;<xsl:value-of select="@param"/>&gt;</b> (list, join="<i><xsl:value-of select="@join"/></i>", each="<i><xsl:value-of select="@each"/></i>")</xsl:template>
</xsl:stylesheet>
